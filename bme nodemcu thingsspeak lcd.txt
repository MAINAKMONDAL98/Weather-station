//https://github.com/MAINAKMONDAL98
#include "ThingSpeak.h"
#include <ESP8266WiFi.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>

#define SEALEVELPRESSURE_HPA (1013.25)

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);
char ssid[] = "";   // your network SSID (name) 
char pass[] = "";   // your network password
int keyIndex = 0;            // your network key Index number (needed only for WEP)
WiFiClient  client;

unsigned long myChannelNumber = 1106607;
const char * myWriteAPIKey = "U7JNG14Q3FIEB1SK";

int number = 0;
int x;


Adafruit_BME280 bme;

float temperature, humidity, pressure, altitude;



void setup() {
  Serial.begin(115200);  // Initialize serial

  WiFi.mode(WIFI_STA); 
  ThingSpeak.begin(client);  // Initialize ThingSpeak


  Serial.begin(115200);

  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  
  bool status = bme.begin(0x76);  
  if (!status) {
    Serial.println("Could not find a valid BME280 sensor, check wiring!");
    while (1);
  }
  
  delay(2000);
  display.clearDisplay();
  display.setTextColor(WHITE);


}

void loop() {
  display.clearDisplay();
  temperature = bme.readTemperature();
  number=temperature;
  ThingSpeak.writeField(myChannelNumber, 1, number, myWriteAPIKey);
  display.setTextSize(1);
  display.setCursor(0,0);
  display.print("Temperature: ");
  display.setTextSize(2);
  display.setCursor(0,10);
  display.print(String(bme.readTemperature()));
  display.print(" ");
  display.setTextSize(1);
  display.cp437(true);
  display.write(167);
  display.setTextSize(2);
  display.print("C");
  display.clearDisplay();
  delay(2000);

  humidity = bme.readHumidity();
  number=humidity;
  ThingSpeak.writeField(myChannelNumber, 2, number, myWriteAPIKey);
  display.setTextSize(1);
  display.setCursor(0,0);
  display.print("Humidity: ");
  display.setTextSize(2);
  display.setCursor(0,10);
  display.print(String(bme.readHumidity()));
  display.print(" ");
  display.setTextSize(1);
  display.cp437(true);
  display.write(167);
  display.setTextSize(2);
  display.print("%");
  display.clearDisplay();
  dealy(2000);

  pressure = bme.readPressure() / 100.0F;
  number=pressure;
  ThingSpeak.writeField(myChannelNumber, 3, number, myWriteAPIKey);
  display.setTextSize(1);
  display.setCursor(0,0);
  display.print("Pressure: ");
  display.setTextSize(2);
  display.setCursor(0,10);
  display.print(String(number));
  display.print(" ");
  display.setTextSize(1);
  display.cp437(true);
  display.write(167);
  display.setTextSize(2);
  display.print("p");
  display.clearDisplay();
  delay(2000);

  altitude = bme.readAltitude(SEALEVELPRESSURE_HPA);
  number=altitude;
  x=ThingSpeak.writeField(myChannelNumber, 4, number, myWriteAPIKey);
  display.setTextSize(1);
  display.setCursor(0,0);
  display.print("Altitude: ");
  display.setTextSize(2);
  display.setCursor(0,10);
  display.print(String(number));
  display.print(" ");
  display.setTextSize(1);
  display.cp437(true);
  display.write(167);
  display.setTextSize(2);
  display.print("m");
  display.clearDisplay();
  delay(2000);  

  
  // Connect or reconnect to WiFi
  if(WiFi.status() != WL_CONNECTED){
    Serial.print("Attempting to connect to SSID: ");
    //Serial.println(SECRET_SSID);
    while(WiFi.status() != WL_CONNECTED){
      WiFi.begin(ssid, pass);  // Connect to WPA/WPA2 network. Change this line if using open or WEP network
      Serial.print(".");
      delay(5000);     
    } 
    Serial.println("\nConnected.");
  }
  
  // Write to ThingSpeak. There are up to 8 fields in a channel, allowing you to store up to 8 different
  // pieces of information in a channel.  Here, we write to field 1.
  if(x == 200){
    Serial.println("Channel update successful.");
  }
  else{
    Serial.println("Problem updating channel. HTTP error code " + String(x));
  }

  
  
  delay(20000); // Wait 20 seconds to update the channel again
}